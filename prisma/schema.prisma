// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Color {
  id               Int       @id @default(autoincrement())
  code             String    @unique
  status           Int       @default(200)
  title            String
  variation_type   Int       @default(1)
  created_at       DateTime  @default(now())
  background_color String?
  image_tags       String?
  image_url        String?
  image_text       String?
  image_label      String?
  updated_at       DateTime?
  Sku              Sku[]

  @@map("colors")
}

model Size {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  status         Int       @default(200)
  title          String
  variation_type Int       @default(2)
  created_at     DateTime  @default(now())
  updated_at     DateTime?

  Sku Sku[]

  @@map("sizes")
}

model Sku {
  id                     Int       @id @default(autoincrement())
  code                   String    @unique
  status                 Int       @default(200)
  title                  String
  mpn                    String?
  ncm                    String
  ean                    String?
  slug                   String    @unique
  created_at             DateTime  @default(now())
  price_wholesale        Decimal?
  promo_price_wholesale  Decimal?
  price_retail           Decimal?
  promo_price_retail     Decimal?
  cost                   Decimal?
  stock_available        Int       @default(0)
  stock_order_production Int       @default(0)
  discount_percentage    Float?
  reference_id           String?
  reference_name         String?
  integration_code       String?
  updated_at             DateTime?
  measured_unit          String?
  minimum_stock_amount   Decimal?
  maximum_stock_amount   Decimal?
  ideal_stock_amount     Decimal?
  sales_start_date       DateTime?
  sales_end_date         DateTime?
  is_active              Boolean   @default(true)
  is_finished_product    Boolean   @default(false)
  is_raw_material        Boolean   @default(false)
  is_bulk_material       Boolean   @default(false)
  is_own_production      Boolean   @default(false)
  is_blocked             Boolean   @default(false)

  product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int?

  color      Color  @relation(fields: [color_code], references: [code])
  color_code String
  size       Size   @relation(fields: [size_code], references: [code])
  size_code  String

  categories Category[]

  @@map("skus")
}

model Product {
  id                    Int        @id @default(autoincrement())
  status                Int        @default(200)
  title                 String     @unique
  weight                Float
  ncm                   String
  mpn                   String?
  ean                   String?
  description           String
  slug                  String     @unique
  created_at            DateTime   @default(now())
  price_wholesale       Decimal?
  promo_price_wholesale Decimal?
  price_retail          Decimal?
  promo_price_retail    Decimal?
  cost                  Decimal?
  package_weight        Float?
  package_height        Float?
  package_length        Float?
  package_width         Float?
  updated_at            DateTime?
  discount_percentage   Float?
  reference_id          String?
  reference_name        String?
  integration_code      String?
  skus                  Sku[]
  categories            Category[]

  @@map("products")
}

model Category {
  id         Int       @id @default(autoincrement())
  status     Int       @default(200)
  title      String    @unique
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?

  products Product[]
  skus     Sku[]

  @@map("categories")
}

model User {
  id                  String    @id @default(uuid())
  code                String    @unique
  status              Int       @default(200)
  name                String
  email               String?
  regitered_at        DateTime
  created_at          DateTime  @default(now())
  rg                  String?
  birthDate           String?
  updated_at          DateTime?
  city                String?
  state               String?
  country             String?
  postal_code         String?
  cpf                 String?
  cnpj                String?
  gender              String?
  is_customer         Boolean   @default(false)
  is_supplier         Boolean   @default(false)
  is_representative   Boolean   @default(false)
  is_shipping_company Boolean   @default(false)
  is_employee         Boolean   @default(false)
  is_active           Boolean   @default(true)
  employee_status     String?
  totvs_branch_code   Int?

  addresses Address[]
  phones    Phone[]
  Order     Order[]

  @@unique([code, id])
  @@map("users")
}

model Address {
  id               String    @id @default(uuid())
  status           Int       @default(200)
  type             String?
  country          String
  state            String
  city             String
  zip_code         String
  neighborhood     String?
  street           String
  number           Int       @default(0)
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  complement       String?
  ibge_city_code   Int?
  bcb_country_code Int?

  user      User   @relation(fields: [user_code, user_id], references: [code, id])
  user_code String
  user_id   String

  @@map("addresses")
}

model Phone {
  id         String    @id @default(uuid())
  status     Int       @default(200)
  type       String?
  ddd_code   String
  number     String
  created_at DateTime  @default(now())
  updated_at DateTime?

  user      User   @relation(fields: [user_code, user_id], references: [code, id])
  user_code String
  user_id   String

  @@map("phones")
}

model Order {
  id                     String    @id @default(uuid())
  code                   String    @unique
  status                 Int       @default(0)
  type                   Int
  items_quantity         Int
  total_items            Int
  discount_value         Decimal
  total_value            Decimal
  created_at             DateTime  @default(now())
  updated_at             DateTime?
  utm_campaign           String?
  utm_source             String?
  utm_medium             String?
  utm_content            String?
  utm_term               String?
  fiscal_code            String?
  gateway_id             String?
  order_vtex_id          String?
  totvs_branch_code      Int?
  totvs_creation_date    DateTime?
  representative_code    String?
  representative_name    String?
  operation_code         String?
  operation_name         String?
  payment_condition_code String?
  payment_condition_name String?
  freight_type           Int?
  freight_value          Decimal?
  shipping_company_code  String?
  shipping_company_cnpj  String?
  shipping_company_name  String?
  shipping_service_code  String?
  shipping_service_name  String?
  totvs_order_status     String?

  user      User   @relation(fields: [user_id, user_code], references: [id, code])
  user_id   String @unique
  user_code String @unique

  shipping_address ShippingAddress?

  order_items  OrderItem[]
  transactions Transaction[]

  @@unique([code, id])
  @@map("orders")
}

model ShippingAddress {
  id               String    @id @default(uuid())
  status           Int       @default(200)
  type             String?
  country          String
  state            String
  city             String
  zip_code         String
  neighborhood     String?
  street           String
  number           Int       @default(0)
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  complement       String?
  ibge_city_code   Int?
  bcb_country_code Int?

  order      Order  @relation(fields: [order_id, order_code], references: [id, code])
  order_id   String @unique
  order_code String @unique

  @@unique([order_id, order_code])
  @@map("shipping_addresses")
}

model OrderItem {
  id                     Int       @id @default(autoincrement())
  product_code           String
  product_name           String
  product_reference_code String
  product_reference_name String
  product_sku_code       String
  color_code             String
  color_name             String
  size_name              String
  created_at             DateTime  @default(now())
  updated_at             DateTime?
  to_settle_quantity     Int?
  settled_quantity       Int?
  canceled_quantity      Int?
  extra_quantity         Int?
  pending_quantity       Int?
  original_price         Decimal?
  price                  Decimal?
  discount_percentage    Float?
  totvs_created_at       DateTime?
  totvs_updated_at       DateTime?

  order      Order  @relation(fields: [order_id, order_code], references: [id, code])
  order_id   String @unique
  order_code String @unique

  @@map("order_items")
}

model Transaction {
  id                         String    @id @default(uuid())
  status                     String
  created_at                 DateTime  @default(now())
  updated_at                 DateTime?
  approved_date              DateTime?
  cancellation_date          DateTime?
  currency                   String
  total_value                Decimal
  installments               Int
  installment_values         Decimal
  gateway_name               String
  gateway_transaction_id     String?
  gateway_authorization_code String?
  user_gateway_id            String
  user_gateway_score         String?
  user_gateway_card_id       String?
  payment_type               String
  payment_name               String
  payment_link               String
  payment_card_nsu           String?
  payment_card_brand         String?

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique

  @@map("transactions")
}
