// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Color {
  id               Int       @id @default(autoincrement())
  code             String    @unique
  status           Int       @default(200)
  title            String
  variation_type   Int       @default(1)
  created_at       DateTime  @default(now())
  background_color String?
  image_tags       String?
  image_url        String?
  image_text       String?
  image_label      String?
  updated_at       DateTime?
  Sku              Sku[]

  @@map("colors")
}

model Size {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  status         Int       @default(200)
  title          String
  variation_type Int       @default(2)
  created_at     DateTime  @default(now())
  updated_at     DateTime?

  Sku Sku[]

  @@map("sizes")
}

model Sku {
  id                     Int       @id @default(autoincrement())
  code                   String    @unique
  status                 Int       @default(200)
  title                  String
  mpn                    String?
  ncm                    String
  ean                    String?
  slug                   String    @unique
  created_at             DateTime  @default(now())
  price_wholesale        Decimal?
  promo_price_wholesale  Decimal?
  price_retail           Decimal?
  promo_price_retail     Decimal?
  cost                   Decimal?
  stock_available        Int       @default(0)
  stock_order_production Int       @default(0)
  discount_percentage    Float?
  reference_id           String?
  reference_name         String?
  integration_code       String?
  updated_at             DateTime?
  measured_unit          String?
  minimum_stock_amount   Decimal?
  maximum_stock_amount   Decimal?
  ideal_stock_amount     Decimal?
  sales_start_date       DateTime?
  sales_end_date         DateTime?
  is_active              Boolean   @default(true)
  is_finished_product    Boolean   @default(false)
  is_raw_material        Boolean   @default(false)
  is_bulk_material       Boolean   @default(false)
  is_own_production      Boolean   @default(false)
  is_blocked             Boolean   @default(false)

  product    Product? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int?

  color      Color  @relation(fields: [color_code], references: [code])
  color_code String
  size       Size   @relation(fields: [size_code], references: [code])
  size_code  String

  categories Category[]

  @@map("skus")
}

model Product {
  id                    Int        @id @default(autoincrement())
  status                Int        @default(200)
  title                 String     @unique
  weight                Float
  ncm                   String
  mpn                   String?
  ean                   String?
  description           String
  slug                  String     @unique
  created_at            DateTime   @default(now())
  price_wholesale       Decimal?
  promo_price_wholesale Decimal?
  price_retail          Decimal?
  promo_price_retail    Decimal?
  cost                  Decimal?
  package_weight        Float?
  package_height        Float?
  package_length        Float?
  package_width         Float?
  updated_at            DateTime?
  discount_percentage   Float?
  reference_id          String?
  reference_name        String?
  integration_code      String?
  skus                  Sku[]
  categories            Category[]

  @@map("products")
}

model Category {
  id         Int       @id @default(autoincrement())
  status     Int       @default(200)
  title      String    @unique
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?

  products Product[]
  skus     Sku[]

  @@map("categories")
}

model User {
  id                  String    @id @default(uuid())
  code                String    @unique
  status              Int       @default(200)
  name                String
  email               String    @unique
  phone               String
  regitered_at        DateTime
  created_at          DateTime  @default(now())
  rg                  String?
  birthDate           DateTime?
  updated_at          DateTime?
  address             String?
  city                String?
  state               String?
  country             String?
  postal_code         String?
  cpf                 String?
  cnpj                String?
  gender              String?
  is_customer         Boolean   @default(false)
  is_supplier         Boolean   @default(false)
  is_representative   Boolean   @default(false)
  is_shipping_company Boolean   @default(false)
  is_employee         Boolean   @default(false)
  employee_status     String?
  is_active           Boolean   @default(true)

  addresses  Address[]
  telephones Telephone[]

  @@unique([code, id])
  @@map("users")
}

model Address {
  id             String    @id @default(uuid())
  status         Int       @default(200)
  type           String
  country        String
  state          String
  city           String
  zip_code       String
  neighborhood   String
  street         String
  number         Int
  created_at     DateTime  @default(now())
  updated_at     DateTime?
  complement     String?
  ibge_city_code String?
  bcbCountryCode String?

  user      User   @relation(fields: [user_code, user_id], references: [code, id])
  user_code String
  user_id   String

  @@map("addresses")
}

model Telephone {
  id         String    @id @default(uuid())
  status     Int       @default(200)
  type       String
  ddd_code   String
  number     String
  created_at DateTime  @default(now())
  updated_at DateTime?

  user      User   @relation(fields: [user_code, user_id], references: [code, id])
  user_code String
  user_id   String

  @@map("telephones")
}
